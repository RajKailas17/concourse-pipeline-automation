resources:

  - name: code
    type: git
    icon: github
    check_every: 168h
    source:
      uri: https://github.com/RajKailas17/concourse-pipeline-automation.git
      branch: main

service-credential: &service-credential
  username: ((service-user.user))
  password: ((service-pass.pass))

jobs:
  - name: set-self
    public: true
    plan:
      - get: code
        trigger: true
      - set_pipeline: self
        file: code/pipelines/instanced/set-release-pipelines.yml
  - name: set-pipelines
    plan:
      - get: code
        trigger: true
        passed: [ set-self ]
      - task: get-release-notes
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: alpine
          inputs:
            - name: code
          outputs:
            - name: release_notes
          run:
            path: /bin/sh
            user: root
            args:
              - -c
              - |
                apk add --quiet jq
                cd code/release-list
                echo "Listing files "
                ls -ltr
                release=((release.id))
                echo "release is ${release}"
                
                echo $(cat release_((release.id)).csv | jq -R '{services: [inputs | split(",") | {serviceName: .[0], branchName: .[1], release: ((release.id))}]}') > release.json
                ls -ltr
                cp ./release.json ../../release_notes
      - load_var: release_info
        file: release_notes/release.json

      - across: # For each target value
          - var: target
            values: ((.:release_info.services))
            max_in_flight: 5
        set_pipeline: ((.:target.release))-((.:target.serviceName))-pipeline
        file: code/pipelines/instanced/release-pipeline-template.yml
        instance_vars:
          release: ((.:target.release))
        vars:
          app:
            name: ((.:target.serviceName))
            branch: ((.:target.branchName))
